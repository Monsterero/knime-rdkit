/* 
 * This source code, its documentation and all related files
 * are protected by copyright law. All rights reserved.
 *
 * Copyright (C)__CURRENT_YEAR__
 * Novartis Institutes for BioMedical Research
 *
 * You may not modify, publish, transmit, transfer or sell, reproduce,
 * create derivative works from, distribute, perform, display, or in
 * any way exploit any of the content, in whole or in part, except as
 * otherwise expressly permitted in writing by the copyright owner or
 * as specified in the license file distributed with this product.
 */
package __BASE_PACKAGE__;

import org.RDKit.ROMol;
import org.RDKit.RWMol;
import org.knime.core.data.DataRow;
import org.knime.core.data.DataTableSpec;
import org.knime.core.node.InvalidSettingsException;
import org.knime.core.node.NodeLogger;
import org.knime.core.node.defaultnodesettings.SettingsModelString;
import org.rdkit.knime.nodes.AbstractRDKitSplitterNodeModel;
import org.rdkit.knime.types.RDKitMolValue;
import org.rdkit.knime.util.InputDataInfo;
import org.rdkit.knime.util.SettingsUtils;

/**
 * This class implements the node model of the __NODE_NAME__ node
 * providing a row filter based on the open source RDKit library.
 * __DESCRIPTION__
 * @author __VENDOR_NAME__ 
 */
public class __NODE_NAME__NodeModel extends AbstractRDKitSplitterNodeModel {

	//
	// Constants
	//
	
	/** The logger instance. */
	protected static final NodeLogger LOGGER = NodeLogger
			.getLogger(__NODE_NAME__NodeModel.class);
	
	/** Input data info index for Mol value. */
	protected static final int INPUT_COLUMN_MOL = 0;
	
	//
	// Members
	//
	
	/** Settings model for the column name of the input column. */
    private final SettingsModelString m_modelInputColumnName =
            registerSettings(__NODE_NAME__NodeDialog.createInputColumnNameModel());

    //
    // Constructor
    //
    
    /**
     * Create new node model with one data in- and one out-port.
     */
    __NODE_NAME__NodeModel() {
     	super(1, 1);
    }

    //
    // Protected Methods
    //
    
    /**
     * {@inheritDoc}
     */
    @Override
    protected DataTableSpec[] configure(final DataTableSpec[] inSpecs)
            throws InvalidSettingsException {
    	// Reset warnings and check RDKit library readiness
    	super.configure(inSpecs);
    	
        // Auto guess the input column if not set - fails if no compatible column found
        SettingsUtils.autoGuessColumn(inSpecs[0], m_modelInputColumnName, RDKitMolValue.class, 0, 
        		"Auto guessing: Using column %COLUMN_NAME%.", 
        		"No RDKit Mol compatible column in input table. Use \"Molecule to RDKit\" " +
        			"node to convert Smiles or SDF.", getWarningConsolidator()); 

        // Determines, if the input column exists - fails if it does not
        SettingsUtils.checkColumnExistence(inSpecs[0], m_modelInputColumnName, RDKitMolValue.class,  
        		"Input column has not been specified yet.",
        		"Input column %COLUMN_NAME% does not exist. Has the input table changed?");

        // Consolidate all warnings and make them available to the user
        generateWarnings();

        // Generate output specs
        return getOutputTableSpecs(inSpecs);
    }

    /**
     * This implementation generates input data info object for the input mol column
     * and connects it with the information coming from the appropriate setting model.
     * {@inheritDoc}
     */
    @SuppressWarnings("unchecked")
	protected InputDataInfo[] createInputDataInfos(int inPort, DataTableSpec inSpec)
		throws InvalidSettingsException {
    	
    	InputDataInfo[] arrDataInfo = null;
    	
    	// Specify input of table 1
    	if (inPort == 0) {
    		arrDataInfo = new InputDataInfo[1]; // We have only one input column
    		arrDataInfo[INPUT_COLUMN_MOL] = new InputDataInfo(inSpec, m_modelInputColumnName, 
    				InputDataInfo.EmptyCellPolicy.TreatAsNull, null,
    				RDKitMolValue.class);
    	}
    	
    	return (arrDataInfo == null ? new InputDataInfo[0] : arrDataInfo);
    }

    /**
     * {@inheritDoc}
     * This implementation filters out all rows with missing cells and molecules with 0 atoms.
     * 
     * @return 0 to keep the row, or -1 if row shall be filtered out completely.
     */
    @Override
    public int determineTargetTable(int iInPort, int iRowIndex, DataRow row, InputDataInfo[] arrInputDataInfo, 
    	int iUniqueWaveId) throws InputDataInfo.EmptyCellException {
    	boolean bRemove = true;

    	///////////////////////////////////////////////////////////////////////////////////////////////////
    	// TODO: Change the following condition to implement the filter. The current one is filtering
    	//       out missing cells and molecules with 0 atoms. 
    	//       It is common to base decisions on intermediate pre-processing results, which would be 
    	//       stored in a transient member variable of the model.
    	///////////////////////////////////////////////////////////////////////////////////////////////////
	    	
    	// Check the input cell for the condition
    	ROMol mol = markForCleanup(arrInputDataInfo[INPUT_COLUMN_MOL].getROMol(row), iUniqueWaveId);    
    	if (mol != null) {
    		RWMol temp = markForCleanup(new RWMol(mol), iUniqueWaveId);
	        if (temp.getNumAtoms() > 0) {
	        	bRemove = false;
	        }
    	}
    	
    	// Determine target table port (-1 is the trash bin)
    	return (bRemove ? -1 : 0);
    }
}